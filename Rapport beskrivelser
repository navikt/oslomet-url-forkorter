Rapport beskrivelser underveis: 

feat: Legg til forord for bacheloroppgaven
- Inkluderer introduksjon til prosjektet og takk til veiledere og samarbeidspartnere.

feat: Legg til beskrivelse av gruppemedlemmer
- Beskriver hver gruppemedlems bakgrunn og rolle i prosjektet.

feat: Inkluderer beskrivelse av oppdragsgiver (NAV)
- Forklarer NAVs behov for en intern URL-forkortelsestjeneste.
- Beskriver hvordan løsningen vil forbedre informasjonsflyt og sikkerhet.

feat: Legg til veiledere fra OsloMet og NAV
- Inkluderer beskrivelse av veileder fra OsloMet (Andrea Arcuri).
- Inkluderer beskrivelse av veileder fra NAV (Kyrre Havik).

feat: Beskriver hvorfor gruppen valgte denne oppgaven
- Forklarer beslutningsprosessen bak valg av prosjektet.
- Understreker relevans for offentlig sektor og teknologiske utfordringer.

feat: Legg til prosjektmål og beskrivelse
- Definerer hovedmålene for prosjektet og hvordan det skal bidra til NAVs interne infrastruktur.

feat: Definerer problemstilling og delspørsmål
- Inkluderer overordnet problemstilling for utviklingen av URL-forkortelsestjenesten.
- Liste over sentrale underspørsmål for sikkerhet, skalerbarhet og integrasjon.

feat: Beskrivelse av målgruppen
- Definerer primærbrukerne av løsningen, med fokus på NAVs interne ansatte.

feat: Legg til teknologi- og verktøyliste
- Beskriver valg av backend-teknologier (Kotlin, Ktor, PostgreSQL).
- Beskriver frontend-teknologier (React, Redux, Tailwind CSS).
- Inkluderer informasjon om sikkerhet og tilgangsstyring.
- Nevner infrastruktur og distribusjon via NAVs NAIS-plattform.

feat: Inkluderer "Veien videre" for prosjektet
- Beskriver neste steg, inkludert testing, brukeropplæring og videreutvikling.

VIDERE ENDRINGER: 
DelKapittel 
1.8 Teknologi og verktøy (Foreløpig ikke helt fastsatt)
Beskrivelse av teknologivalgene for backend, frontend, infrastruktur og sikkerhet.

Backend:
Kotlin valgt for sin kompatibilitet med JVM og gode støtte for backend-utvikling.
Javalin brukes for å bygge RESTful API-er.
PostgreSQL valgt som database for produksjon, med H2 for lokal testing.
Logging håndteres med Logback, med planlagt overvåkning via Grafana og Prometheus.

Frontend:
React benyttes for sin komponentbaserte arkitektur.
Tailwind CSS brukes for rask og modulær styling.
Tilstandshåndtering via React Context/Zustand (Redux vurderes).

Infrastruktur og distribusjon:
NAVs NAIS-plattform brukes for hosting og drift av applikasjonen.
CI/CD via GitHub Actions for automatisert testing og utrulling.

Sikkerhet og tilgangsstyring:
OAuth 2.0 / OpenID Connect planlagt for autentisering.
Logging av API-kall for sikkerhet og revisjonssporing.

Kapittel 2: Teknologier og verktøy
Detaljert beskrivelse av hver teknologi og verktøy benyttet i prosjektet.
Backend-teknologier: Kotlin, Ktor, PostgreSQL, OAuth 2.0, Prometheus & Grafana.
Frontend-teknologier: React, Redux (mulig implementering), Tailwind CSS.
Infrastruktur: NAIS-plattform, GitHub Actions for CI/CD.
Sikkerhet: Rate limiting, logging, kryptering for GDPR-overholdelse.
Utviklings- og testverktøy: Postman for API-testing, Docker for containerisering, Jira/Trello for prosjektstyring.

Kapittel 3: Prosessdokumentasjon
3.1 Forord

Gjennomgang av utviklingsprosessen fra idé til ferdig produkt.
Dokumentasjon av teknologivalg, designvalg og implementasjon.

3.2 Metodikk og planlegging

Smidig utviklingsmetodikk inspirert av Scrum.
Sprintplanlegging med standup-møter via Teams/Discord.
GitHub Projects benyttet for oppgavehåndtering med Kanban-brett.
Evaluering og justering etter hver sprint for optimal utviklingsflyt.

3.3 Utviklingsprosessen

Tidlig planlegging:

Backend utviklet først for stabil API-struktur før frontend-integrasjon.
Bruk av databasehåndtering og autentisering via ID-porten vurdert.
UI/UX Design og skisser:

Prototyper laget i Figma med fokus på minimalistisk og intuitivt design.
Responsivt grensesnitt for mobil og desktop.
Utvikling av flyten:

Beskrivelse av hvordan en URL forkortes, lagres og omdirigeres i systemet.
Sekvensdiagrammer for API-flyten mellom frontend og backend.
Databaseutforming:

Beskrivelse av databasevalg (PostgreSQL for produksjon, H2 for testing).
ER-diagram over databasearkitekturen.
Implementering av indeksering for raskere oppslag av korte URL-er.
Systemarkitektur:

Oversikt over frontend-backend-database strukturen.
Bruk av Javalin for API, PostgreSQL for datalagring og Kotlin for backend.

3.2.3 Tekniske utfordringer
Under utviklingen av URL-forkorteren oppstod utfordringer knyttet til databasehåndtering, autentisering, 
API-kommunikasjon og responsiv UI-design. For å sikre unike korte URL-er vurderte vi flere genereringsmetoder og 
implementerte en sjekk i databasen for å hindre duplisering. Autentiseringsløsningen måtte tilpasses tidsbegrensninger,
og vi gikk fra OAuth 2.0 til en enklere token-basert løsning før vi senere optimaliserte sikkerheten.
Frontend-design møtte utfordringer med responsivitet, som ble løst gjennom iterasjoner med grid-layout og Tailwind CSS. API-feilhåndtering ble forbedret med logging og tydelige statuskoder, 
mens klikkstatistikk ble implementert ved hjelp av en egen tabell med asynkron oppdatering for å redusere belastningen på databasen.

3.3 Utviklingsprosessen
Backend-utviklingen ble prioritert i tidlig fase for å sikre stabilitet i databasekommunikasjon og API-håndtering før frontend-integrasjon. 
Vi etablerte en klar systemarkitektur, med PostgreSQL som database og H2 for lokal testing. API-strukturen ble designet for enkelhet og sikkerhet,
mens GitHub ble brukt til versjonskontroll med separate grener for utvikling og testing. Frontend-teamet startet utviklingen etter at backend-funksjonaliteten var stabil, 
noe som muliggjorde raskere testing og iterasjoner. Vi brukte Javalin for API-håndtering og bygde en sømløs frontend-backend-integrasjon.

3.3.1 UI/UX Design og skisser
For å skape en intuitiv brukeropplevelse utviklet vi tidlige skisser i Figma. 
Designet fokuserte på enkelhet og tydelig informasjonsstruktur. Tidlige iterasjoner viste behov for forbedret skalering, 
noe som førte til justeringer i layout, farger og typografi. Designet ble tilpasset NAVs retningslinjer for å sikre god brukervennlighet og tilgjengelighet. 
Endelige skisser viste forbedringer i struktur, navigasjon og responsivitet sammenlignet med første versjon.

3.3.1.2 Utvikling av flyten
Et Use Case-diagram ble utviklet for å tydeliggjøre interaksjonen mellom brukere og systemet. 
Diagrammet viste hvordan brukere kan generere korte URL-er, mens NAV-ansatte har administrative rettigheter. 
Et aktivitetsdiagram illustrerte den tekniske arbeidsflyten fra innsending av en lang URL til lagring og henting av korte URL-er i databasen. 
Dette ga en strukturert oversikt over hvordan systemet håndterer brukernes forespørsler.

3.3.1.3 Databaseutforming
Databasen ble designet med fokus på effektiv lagring av forkortede URL-er og tilhørende metadata. PostgreSQL ble valgt som primær database, 
mens H2 ble brukt for testing. Vi implementerte indeksering for raskere oppslag, samt en dedikert tabell for logging av klikk på URL-er. 
Databaseoppsettet inkluderer tabeller for brukere, forkortede URL-er, klikkstatistikk og systemlogging for å sikre sporing og vedlikehold av data.
